<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="ja-JP">
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="content-style-type" content="text/css">
<link rel="stylesheet" href="../media/tomoyolinux.css" media="all" type="text/css">
<title>AKARI : 導入ガイド : Chapter 3</title>
</head>

<body>

<div id="titlebar">
<a href="../index.html.ja"><img src="../media/akarititle.png" alt="akarititle.png" width="174" height="40" border="0" align="left" title="AKARI"></a>
</div>

<div id="navbar" class="tomoyo-documentation">
<ul id="navbarlist">
<li id="tomoyo-home"><a href="../index.html.ja" title="AKARI ホーム">ホーム</a></li>
<li id="tomoyo-about"><a href="../about.html.ja" title="AKARI の詳細">詳細</a></li>
<li id="tomoyo-documentation"><a href="../documentation.html.ja" title="公式ドキュメント">ドキュメント</a></li>
<li id="tomoyo-support"><a href="../support.html.ja" title="サポート情報">サポート</a></li>
<li id="tomoyo-links"><a href="../links.html.ja" title="Links">リンク</a></li>
</ul>
<ul id="switch-language">
<li id="tomoyo-switch-language"><a href="chapter-3.html.en" title="Go to English page">English page</a></li>
</ul>
</div>

<div id="content">

<div id="documentation">

<div class="navheader">
<p><a href="chapter-2.html.ja">&lt;前&gt;</a> <a href="index.html.ja">&lt;目次&gt;</a> <a href="chapter-4.html.ja">&lt;次&gt;</a></p>
</div>

<h2>Chapter 3: どうすれば AKARI をインストールできますか？</h2>

<h3><a name="3.1">3.1. 依存するパッケージのインストール</a></h3>

<p>カーネルモジュールおよびツールをコンパイルするためには以下のパッケージが必要になります。</p>

<ul>
<li><b>wget</b>：ファイルをダウンロードするために必要です。</li>
<li><b>gcc</b>：コンパイルを行うために必要です。</li>
<li><b>make</b>： Makefile を利用するために必要です。</li>
<li><b>ncurses</b>：ツールのユーザインタフェースを利用するために必要です。</li>
</ul>

<p>これらのパッケージは以下のコマンドを実行することによりインストールできます：</p>

<p><strong>RedHat 系の場合</strong></p>
<pre class="command">
# yum -y install wget gcc make ncurses-devel
</pre>

<p><strong>Debian 系の場合</strong></p>
<pre class="command">
# apt-get -y install wget gcc make libncurses-dev
</pre>

<p><strong>SUSE 系の場合</strong></p>
<pre class="command">
# yast -i wget gcc make ncurses-devel
</pre>

<h3><a name="3.2">3.2. カーネルモジュールのインストール</a></h3>

<h4><a name="3.2.1">3.2.1. カーネルモジュール開発パッケージの入手</a></h4>

<p>カーネルの開発用パッケージをインストールして、そのディレクトリに移動してください：</p>

<p><strong>RedHat 系の場合</strong></p>
<pre class="command">
# VERSION=$(uname -r)
# yum -y install kernel-devel-${VERSION}
# cd /usr/src/kernels/${VERSION}*/
</pre>

<p><strong>Debian 系の場合</strong></p>
<pre class="command">
# VERSION=$(uname -r)
# apt-get -y install linux-headers-${VERSION}
# cd /usr/src/linux-headers-${VERSION}/
</pre>

<p><strong>SUSE 系の場合</strong></p>
<pre class="command">
# VERSION=$(uname -r)
# yast -i kernel-devel
# cd /lib/modules/${VERSION}/build/
</pre>

<h4><a name="3.2.2">3.2.2. AKARI カーネルモジュールのコンパイルとインストール</a></h4>

<p>以下のコマンドを実行して AKARI カーネルモジュールのソースコードを展開してください：</p>

<pre class="command">
# wget -O akari-1.0.35-20170220.tar.gz 'http://osdn.jp/frs/redir.php?f=/akari/49272/akari-1.0.35-20170220.tar.gz'
# wget -O akari-1.0.35-20170220.tar.gz.asc 'http://osdn.jp/frs/redir.php?f=/akari/49272/akari-1.0.35-20170220.tar.gz.asc'
# wget https://tomoyo.osdn.jp/kumaneko-key
# gpg --import kumaneko-key
# gpg akari-1.0.35-20170220.tar.gz.asc
# tar -zxf akari-1.0.35-20170220.tar.gz
</pre>

<p>systemd を利用している環境では、 <code>/sbin/init</code> ではなく <code>/usr/lib/systemd/systemd</code> が実行されます。 systemd を利用しているシステムの場合、以下のように akari/config.h の CONFIG_CCSECURITY_ACTIVATION_TRIGGER 行を編集してください：</p>

<p>変更前：</p>
<pre>
#define CONFIG_CCSECURITY_ACTIVATION_TRIGGER "/sbin/init"
</pre>

<p>変更後：</p>
<pre>
#define CONFIG_CCSECURITY_ACTIVATION_TRIGGER "/usr/lib/systemd/systemd"
</pre>

<p>もし、カーネルモジュールがロードされるのと同時に AKARI を有効化したい場合、以下のように akari/config.h の CONFIG_CCSECURITY_OMIT_USERSPACE_LOADER 行を定義してください。（ただし、 CONFIG_CCSECURITY_OMIT_USERSPACE_LOADER を定義する場合、 akari/policy/ ディレクトリにカーネルモジュール内に埋め込むためのポリシーを提供する必要があります。忘れた場合、カーネルモジュールがロードされるのと同時にカーネルパニックになります。）：</p>

<p>変更前：</p>
<pre>
//#define CONFIG_CCSECURITY_OMIT_USERSPACE_LOADER
</pre>

<p>変更後：</p>
<pre>
#define CONFIG_CCSECURITY_OMIT_USERSPACE_LOADER
</pre>

<p>以下のコマンドを実行して AKARI カーネルモジュールをインストールしてください：</p>

<pre class="command">
# make SUBDIRS=$PWD/akari modules
# make SUBDIRS=$PWD/akari modules_install
# depmod ${VERSION}
</pre>

<p>もし、以下の何れかのエラーメッセージが表示された場合、ご利用のカーネルは AKARI に対応できませんのでご了承ください（代わりに <a href="http://tomoyo.osdn.jp/1.8/index.html.ja">TOMOYO Linux</a> を利用してください）。その他のエラーメッセージが表示された場合は作者（ penguin-kernel&#64;I-love.SAKURA.ne.jp ）にご連絡ください。</p>

<pre class="output">
This module supports only 2.6.0 and later kernels.
You must choose CONFIG_SECURITY=y for building this module.
You must choose CONFIG_KALLSYMS=y for building this module.
You must choose CONFIG_PROC_FS=y for building this module.
You must choose CONFIG_MODULES=y for building this module.
</pre>

<p>もし、ご利用のカーネルでサポートされている機能や構文について知りたい場合には <a href="../comparison.html.ja">AKARI / TOMOYO 機能比較表</a> を参照してください。</p>

<h4><a name="3.2.3">3.2.3. AKARI カーネルモジュールをロードできるかどうかを確認（省略可）</a></h4>

<p>AKARI モジュールを登録する処理は環境依存であるため、問題が起こる場合があります。そのため、問題なくロードできるかどうかを現時点で確認しておくことを推奨します。</p>

<p>以下のコマンドを実行して akari_test.ko モジュールをロードしてください：</p>

<pre class="command">
# dmesg -c &gt; /dev/null
# modprobe akari_test
# dmesg
</pre>
<pre class="output">
akari_test: module verification failed: signature and/or required key missing - tainting kernel
security_ops=ffffffff81df6c80
find_task_by_vpid=ffffffff810821a0
find_task_by_pid_ns=ffffffff81082170
d_absolute_path=ffffffff811c8f10
All dependent symbols have been guessed.
Please verify these addresses using System.map for this kernel (e.g. /boot/System.map-`uname -r` ).
If these addresses are correct, you can try loading AKARI module on this kernel.</pre>

<p>akari_test.ko のロードに成功した場合、上記のように推定されたシンボルのアドレスが表示されますので、実際の System.map ファイルの内容と比較して一致していることを確認してください。（表示されるシンボルの種類やアドレスは環境により異なります。）：</p>

<pre class="command">
# for i in ffffffff81df6c80 ffffffff810821a0 ffffffff81082170 ffffffff811c8f10; do grep $i /boot/System.map-${VERSION}; done
</pre>
<pre class="output">
ffffffff81df6c80 b security_ops
ffffffff810821a0 T find_task_by_vpid
ffffffff81082170 T find_task_by_pid_ns
ffffffff811c8f10 T d_absolute_path
</pre>

<p>一致している場合には先へ進んでください。</p>

<p>カーネルコンフィグで CONFIG_RANDOMIZE_BASE=y という指定が行われている場合、 akari_test.ko が推定したアドレスと System.map ファイルに記録されている実際のアドレスとの間に（以下に示す例のように）差分が見つかることがあります。その場合、推定したアドレスは再起動する毎にランダムに変化しますが、差分の値が推定された各シンボルに対して同じであれば、先へ進んでください。それ以外の場合、このまま続行しても正常に動作しないので、作者にご連絡ください。</p>

<ul>
<li>System.map ファイルに記録されている実際のアドレス<br>
<pre class="command">
# for i in security_hook_heads find_task_by_vpid find_task_by_pid_ns d_absolute_path; do grep $i /boot/System.map-${VERSION}; done
</pre>
<pre class="output">ffffffff81cdac40 D security_hook_heads
ffffffff810b50a0 T find_task_by_vpid
ffffffff810b5030 T find_task_by_pid_ns
ffffffff812789f0 T d_absolute_path</pre></li>
<li>ある再起動時に推定されたアドレス（今回の差分は 0x21000000 ）<br>
<pre class="output">security_hook_heads=ffffffffa2cdac40
find_task_by_vpid=ffffffffa20b50a0
find_task_by_pid_ns=ffffffffa20b5030
d_absolute_path=ffffffffa22789f0</pre></li>
<li>別の再起動時に推定されたアドレス（今回の差分は 0x9000000 ）<br>
<pre class="output">security_hook_heads=ffffffff8acdac40
find_task_by_vpid=ffffffff8a0b50a0
find_task_by_pid_ns=ffffffff8a0b5030
d_absolute_path=ffffffff8a2789f0</pre></li>
<li>また別の再起動時に推定されたアドレス（今回の差分は 0x2f000000 ）<br>
<pre class="output">security_hook_heads=ffffffffb0cdac40
find_task_by_vpid=ffffffffb00b50a0
find_task_by_pid_ns=ffffffffb00b5030
d_absolute_path=ffffffffb02789f0</pre></li>
</ul>

<p>akari_test.ko のロードに失敗した場合、下記のようにエラーメッセージが表示されます。このまま続行しても正常に動作しないので、作者にご連絡ください：</p>

<pre class="command">
# dmesg -c &gt; /dev/null
# modprobe akari_test
</pre>
<pre class="output">
FATAL: Error inserting akari_test (/lib/modules/2.6.32/extra/akari_test.ko): Invalid argument
</pre>
<pre class="command">
# dmesg
</pre>
<pre class="output">
Sorry, I couldn't guess dependent symbols.
I need some changes for supporting your environment.
Please contact the author.
</pre>

<h3><a name="3.3">3.3. 管理ツールのインストール</a></h3>

<p>前述した依存するパッケージがインストールされていることを確認してください。以下のコマンドを実行することによりコンパイルおよびインストールできます。（必要に応じて、 USRLIBDIR=/usr/lib または USRLIBDIR=/usr/lib32 に変更してください。）：</p>

<pre class="command">
$ wget -O ccs-tools-1.8.5-20170102.tar.gz 'http://osdn.jp/frs/redir.php?f=/tomoyo/49693/ccs-tools-1.8.5-20170102.tar.gz'
$ wget -O ccs-tools-1.8.5-20170102.tar.gz.asc 'http://osdn.jp/frs/redir.php?f=/tomoyo/49693/ccs-tools-1.8.5-20170102.tar.gz.asc'
$ gpg ccs-tools-1.8.5-20170102.tar.gz.asc
$ tar -zxf ccs-tools-1.8.5-20170102.tar.gz
$ cd ccs-tools/
$ make -s USRLIBDIR=/usr/lib64
$ su
# make -s USRLIBDIR=/usr/lib64 install
</pre>

<h3><a name="3.4">3.4. 設定の初期化</a></h3>

<p>管理ツールを実行するときに便利なように、管理ツールのインストールされているディレクトリ（ /usr/sbin ）を環境変数 PATH に追加したいと思うかもしれません。 bash を使用している場合、以下の行を ~/.bashrc に追加してください：</p>

<pre>
export PATH=$PATH:/usr/sbin
</pre>

<p>AKARI を使うためには、初期設定の手順を行う必要があります。この手順により、ポリシーを保存するディレクトリが作成されます。全てのポリシーファイルは /etc/ccs/ ディレクトリに保存されます。</p>

<p>初期設定を行うには２つのコマンドのどちらかを使用します。どの機能について解析および制限を行いたいかによりどちらのコマンドを使用するかが決まります。</p>

<p>ファイルの読み書きやプログラムの実行のように<strong>ファイルに関する機能だけを制限</strong>したいと思うユーザもいることでしょう。これは、ポリシーをシンプルにしたいユーザや AKARI が提供する全部の機能を必要とはしないユーザに適しています。ファイルに関する機能だけを制限する場合、このガイドで説明されている例えばネットワークに関する機能などの無関係な部分を無視することができます。ファイルに関する機能だけを使う場合、以下のコマンドを実行してください：</p>

<pre class="command">
# /usr/lib64/ccs/init_policy --file-only-profile --module_name=akari
</pre>

<p><strong>AKARI が提供する全部の機能</strong>を使ってファイルやネットワークや環境変数といった操作を解析したり制限したいと思うユーザもいることでしょう。これは、可能な限りシステムのセキュリティを高めたいと考えているユーザに適しています。このガイドでは全部の機能を使うことを想定して作成されています。全部の機能を使う場合、以下のコマンドを実行してください：</p>

<pre class="command">
# /usr/lib64/ccs/init_policy --module_name=akari
</pre>

<p>上記のコマンドを実行することで、以下のような出力が表示される筈です：</p>

<pre class="command">
# /usr/lib64/ccs/init_policy --module_name=akari
</pre>
<pre class="output">
Creating policy directory... OK
Creating configuration directory... OK
Creating exception policy... OK
Creating domain policy... OK
Creating manager policy... OK
Creating default profile... OK
Creating stat policy... OK
Creating module loader... OK
Creating configuration file for ccs-editpolicy ... OK
Creating configuration file for ccs-auditd ... OK
Creating configuration file for ccs-patternize ... OK
Creating configuration file for ccs-notifyd ... OK
</pre>

<h3><a name="3.5">3.5. ブートローダの設定</a></h3>

<p>カーネルに対するコマンドラインオプションで init= パラメータを指定することで正常に起動できなくなるシステム（例えば RHEL 7 ）では、 <a href="#3.5.1">initramfs 内で AKARI のカーネルモジュールをロードする</a>ように構成する必要があります。正常に起動できるシステム（例えば RHEL 6 ）では、 <a href="#3.5.2">init プロセス内で AKARI のカーネルモジュールをロードする</a>ように構成できます。</p>

<h4><a name="3.5.1">3.5.1.  initramfs 内で AKARI のカーネルモジュールをロードする場合</a></h4>

<p>dracut を利用しているシステムの場合、以下のように /etc/dracut.conf.d/akari.conf を作成の上、 initramfs を再構成してください：</p>

<pre class=command>
# echo 'add_drivers+=" akari "' &gt; /etc/dracut.conf.d/akari.conf
# dracut -f --kver ${VERSION}
</pre>

<p>ブートローダ（ GRUB 等）の設定ファイルを編集し、 rd.driver.pre=akari というパラメータをカーネルに対するコマンドラインオプションに追加してください。以下に例を示します：</p>

<p>変更前：</p>
<pre>
linux16 /boot/vmlinuz-3.10.0-123.1.2.el7.x86_64 ro root=LABEL=/
</pre>

<p>変更後：</p>
<pre>
linux16 /boot/vmlinuz-3.10.0-123.1.2.el7.x86_64 ro root=LABEL=/ rd.driver.pre=akari
</pre>

<p>/boot/grub2/grub.cfg を直接編集するだけでも構いません。しかし、将来カーネルパッケージをアップデートする場合のために、以下のように /etc/default/grub の GRUB_CMDLINE_LINUX 行も編集しておくことを推奨します：</p>

<p>変更前：</p>
<pre>
GRUB_CMDLINE_LINUX="vconsole.keymap=jp106 crashkernel=auto  vconsole.font=latarcyrheb-sun16 rhgb quiet"
</pre>

<p>変更後：</p>
<pre>
GRUB_CMDLINE_LINUX="vconsole.keymap=jp106 crashkernel=auto  vconsole.font=latarcyrheb-sun16 rhgb quiet rd.driver.pre=akari"
</pre>

<h4><a name="3.5.2">3.5.2.  init プロセス内で AKARI のカーネルモジュールをロードする</a></h4>

<p><code>/sbin/akari-init</code> を、以下のように作成してください。 （ modprobe が /sbin ではなく /bin にあるシステムの場合、 /bin/modprobe を指定してください。）：</p>

<pre class=command>
# echo '#! /bin/sh' &gt; /sbin/akari-init
# echo '/sbin/modprobe akari &amp;&amp; exec /sbin/init "$@"' &gt;&gt; /sbin/akari-init
# chmod 755 /sbin/akari-init
</pre>

<p><code>/sbin/init</code> の代わりに <code>/usr/lib/systemd/systemd</code> を利用しているシステムの場合、以下のように <code>/sbin/akari-init</code> を作成してください：</p>

<pre class=command>
# echo '#! /bin/sh' &gt; /sbin/akari-init
# echo '/sbin/modprobe akari &amp;&amp; exec /usr/lib/systemd/systemd "$@"' &gt;&gt; /sbin/akari-init
# chmod 755 /sbin/akari-init
</pre>

<p>ブートローダ（ GRUB 等）の設定ファイルを編集し、 init=/sbin/akari-init というパラメータをカーネルに対するコマンドラインオプションに追加してください。以下に例を示します：</p>

<p>変更前：</p>
<pre>
kernel /boot/vmlinuz-2.6.32-431.17.1.el6.x86_64 ro root=LABEL=/
</pre>

<p>変更後：</p>
<pre>
kernel /boot/vmlinuz-2.6.32-431.17.1.el6.x86_64 ro root=LABEL=/ init=/sbin/akari-init
</pre>

<h3><a name="3.6">3.6. システムの再起動</a></h3>

<p>ここまでで準備は完了です。（お疲れさまでした。）それでは、新しくインストールされたカーネルを使用してみましょう。システムを再起動し、 GRUB の画面（あるいは使用している他のブートローダの画面）で AKARI カーネルを選択してください。</p>

<p><code>/usr/lib/systemd/systemd</code> または <code>/sbin/init</code> が開始される直前に以下のようなメッセージが表示される筈です。（表示される内容は環境により異なります。）：</p>

<pre class="output">
AKARI: 1.0.35   2015/11/11
Access Keeping And Regulating Instrument registered.
Calling /sbin/ccs-init to load policy. Please wait.
CCSecurity: 1.8.5   2015/11/11
Mandatory Access Control activated.
</pre>

<p>quiet または rhgb オプションが指定されていると、カーネルメッセージの大部分が表示されなくなるため、 AKARI のメッセージが表示されなくなります。</p>

<p>カーネルコンパイル時の設定や起動時のオプションによっては、上記のメッセージが表示されないかもしれません。その場合、 /proc/ccs/ ディレクトリをチェックしてください。もし、 /proc/ccs/ ディレクトリが作成されていた場合、 AKARI モジュールは正常に登録されています。</p>

<p>AKARI はＬＳＭモジュールですが、他のＬＳＭモジュールと同時に利用することができます。しかし、 /etc/selinux/config に SELINUX=disabled という指定を行うことにより SELinux を無効にしている場合には、コマンドラインオプションに selinux=0 も追加する必要があります。これは、 /etc/selinux/config の中で SELINUX=disabled という指定が行われている場合、 AKARI が依存しているＬＳＭフックを dracut が無効化してしまうためです。</p>

<h3><a name="3.7">3.7. どのようにすれば AKARI を無効化またはアンインストールできますか？</a></h3>

<p>もし、このガイドに従って操作している間またはそれ以降にシステムが起動しなくなってしまった場合、ポリシーの設定が不適切である場合を含めて AKARI に原因があるかもしれません。その場合、 rd.driver.pre=akari または init=/sbin/akari-init というパラメータをカーネルに対するコマンドラインオプションから削除することにより、 AKARI が無効な状態でカーネルがロードされます。</p>

</div><!-- documentation -->

</div><!-- content -->

<div id="navfooter">
<hr>
<table>
<tr>
<td class="docs-previous">
<a href="chapter-2.html.ja">前</a>
</td>
<td class="docs-index">
<a href="index.html.ja">目次</a>
</td>
<td class="docs-next">
<a href="chapter-4.html.ja">次</a>
</td>
</tr>
<tr>
<td class="docs-previous-description">
<p>Chapter 2: なぜ AKARI が必要なのですか？</p>
</td>
<td class="docs-home">
</td>
<td class="docs-next-description">
<p>Chapter 4: AKARI はどのように動きますか？</p>
</td>
</tr>
</table>
</div>

<div id="footer">
<p class="language">Go to <a href="chapter-3.html.en">English page</a>.</p>
<p class="timestamp">Last modified: $Date$</p>
<p class="trademark">Linux&reg; は世界各国における Linus Torvalds の登録商標です。 TOMOYO&reg; は<a href="http://www.nttdata.co.jp/">株式会社ＮＴＴデータ</a>の登録商標です。</p>
<p><a href="http://osdn.jp/"><img src="http://osdn.jp/sflogo.php?group_id=5310" width="96" height="31" alt="sflogo.php" title="SourceForge.jp"></a></p>
</div>

</body>
</html>
