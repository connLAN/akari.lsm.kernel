<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en-US">
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="content-style-type" content="text/css">
<link rel="stylesheet" href="../media/tomoyolinux.css" media="all" type="text/css">
<title>AKARI : The Official Guide : Chapter 3</title>
</head>

<body>

<div id="titlebar">
<a href="../index.html.en"><img src="../media/akarititle.png" alt="akarititle.png" width="174" height="40" border="0" align="left" title="AKARI"></a>
</div>

<div id="navbar" class="tomoyo-documentation">
<ul id="navbarlist">
<li id="tomoyo-home"><a href="../index.html.en" title="AKARI Home Page">Home</a></li>
<li id="tomoyo-about"><a href="../about.html.en" title="About AKARI">About</a></li>
<li id="tomoyo-documentation"><a href="../documentation.html.en" title="Official Documentation">Documentation</a></li>
<li id="tomoyo-support"><a href="../support.html.en" title="Support information">Support</a></li>
<li id="tomoyo-links"><a href="../links.html.en" title="Links">Links</a></li>
</ul>
<ul id="switch-language">
<li id="tomoyo-switch-language"><a href="chapter-3.html.ja" title="Go to Japanese page">Japanese page</a></li>
</ul>
</div>

<div id="content">

<div id="documentation">

<div class="navheader">
<p><a href="chapter-2.html.en">&lt;Prev&gt;</a> <a href="index.html.en">&lt;Index&gt;</a> <a href="chapter-4.html.en">&lt;Next&gt;</a></p>
</div>

<h2>Chapter 3: How do I install AKARI?</h2>

<h3><a name="3.1">3.1. Installing dependencies</a></h3>

<p>These packages are required for compiling the kernel module and the userspace tools:</p>

<ul>
<li><b>wget</b>: to download sources</li>
<li><b>gcc</b>: to build the module and tools</li>
<li><b>make</b>: to build the module and tools</li>
<li><b>ncurses</b>: for the tools user interface</li>
</ul>

<p>These can be installed with the following commands:</p>

<p><strong>RedHat distributions</strong></p>
<pre class="command">
# yum -y install wget gcc make ncurses-devel
</pre>

<p><strong>Debian distributions</strong></p>
<pre class="command">
# apt-get -y install wget gcc make libncurses-dev
</pre>

<p><strong>SUSE distributions</strong></p>
<pre class="command">
# yast -i wget gcc make ncurses-devel
</pre>

<h3><a name="3.2">3.2. Building the kernel module</a></h3>

<h4><a name="3.2.1">3.2.1. Installing the kernel development package</a></h4>

<p>Install the kernel development package and go to the directory that it has installed into:</p>

<p><strong>RedHat distributions</strong></p>
<pre class="command">
# VERSION=$(uname -r)
# yum -y install kernel-devel-${VERSION}
# cd /usr/src/kernels/${VERSION}*/
</pre>

<p><strong>Debian distributions</strong></p>
<pre class="command">
# VERSION=$(uname -r)
# apt-get -y install linux-headers-${VERSION}
# cd /usr/src/linux-headers-${VERSION}/
</pre>

<p><strong>SUSE distributions</strong></p>
<pre class="command">
# VERSION=$(uname -r)
# yast -i kernel-devel
# cd /lib/modules/${VERSION}/build/
</pre>

<h4><a name="3.2.2">3.2.2. Building and installing the AKARI module</a></h4>

<p>Run the following commands in order to extract source code of AKARI:</p>

<pre class="command">
# wget -O akari-1.0.34-20150505.tar.gz 'http://osdn.jp/frs/redir.php?f=/akari/49272/akari-1.0.34-20150505.tar.gz'
# wget -O akari-1.0.34-20150505.tar.gz.asc 'http://osdn.jp/frs/redir.php?f=/akari/49272/akari-1.0.34-20150505.tar.gz.asc'
# wget http://I-love.SAKURA.ne.jp/kumaneko-key
# gpg --import kumaneko-key
# gpg akari-1.0.34-20150505.tar.gz.asc
# tar -zxf akari-1.0.34-20150505.tar.gz
</pre>

<p>On systemd environments, <code>/usr/lib/systemd/systemd</code> will be executed rather than <code>/sbin/init</code>. If your system is using systemd, please edit CONFIG_CCSECURITY_ACTIVATION_TRIGGER line in akari/config.h like below:</p>

<p>Before:</p>
<pre>
#define CONFIG_CCSECURITY_ACTIVATION_TRIGGER "/sbin/init"
</pre>

<p>After:</p>
<pre>
#define CONFIG_CCSECURITY_ACTIVATION_TRIGGER "/usr/lib/systemd/systemd"
</pre>

<p>If you want to activate AKARI as soon as the kernel module is loaded, you can define CONFIG_CCSECURITY_OMIT_USERSPACE_LOADER line in akari/config.h like below. (But be sure to supply built-in policy configuration located at akari/policy/ directory if you define CONFIG_CCSECURITY_OMIT_USERSPACE_LOADER, or the system will panic as soon as the kernel module is loaded.):</p>

<p>Before:</p>
<pre>
//#define CONFIG_CCSECURITY_OMIT_USERSPACE_LOADER
</pre>

<p>After:</p>
<pre>
#define CONFIG_CCSECURITY_OMIT_USERSPACE_LOADER
</pre>

<p>Run the following commands in order to build and install AKARI:</p>

<pre class="command">
# make SUBDIRS=$PWD/akari modules
# make SUBDIRS=$PWD/akari modules_install
# depmod ${VERSION}
</pre>

<p>If you encountered one of errors listed below, you cannot use AKARI for your kernel. You may instead wish to try <a href="http://tomoyo.osdn.jp/1.8/index.html.en">TOMOYO Linux</a>. For other errors, please contact the author ( penguin-kernel&#64;I-love.SAKURA.ne.jp ).</p>

<pre class="output">
This module supports only 2.6.0 and later kernels.
You must choose CONFIG_SECURITY=y for building this module.
You must choose CONFIG_KALLSYMS=y for building this module.
You must choose CONFIG_PROC_FS=y for building this module.
You must choose CONFIG_MODULES=y for building this module.
</pre>

<p>If you are interested in what functionality and syntax are supported for your kernel, see <a href="../comparison.html.en">AKARI / TOMOYO functionality comparison table</a>.</p>

<h4><a name="3.2.3">3.2.3. Check whether AKARI kernel module can be loaded or not (Optional)</a></h4>

<p>Since registering AKARI module depends on your environment, you might encounter problems. Therefore, I recommend you to confirm that AKARI module can be loaded at this step.</p>

<p>Run the following commands in order to try to load akari_test.ko module:</p>

<pre class="command">
# dmesg -c &gt; /dev/null
# modprobe akari_test
# dmesg
</pre>
<pre class="output">
akari_test: module verification failed: signature and/or required key missing - tainting kernel
security_ops=ffffffff81df6c80
find_task_by_vpid=ffffffff810821a0
find_task_by_pid_ns=ffffffff81082170
d_absolute_path=ffffffff811c8f10
All dependent symbols have been guessed.
Please verify these addresses using System.map for this kernel (e.g. /boot/System.map-`uname -r` ).
If these addresses are correct, you can try loading AKARI module on this kernel.</pre>

<p>If akari_test.ko was loaded successfully, guessed addresses like above are printed. Therefore, please compare guessed addresses from akari_test.ko and actual addresses from System.map file. (Number of symbols and addresses printed depends on your environment.):</p>

<pre class="command">
# for i in ffffffff81df6c80 ffffffff810821a0 ffffffff81082170 ffffffff811c8f10; do grep $i /boot/System.map-${VERSION}; done
</pre>
<pre class="output">
ffffffff81df6c80 b security_ops
ffffffff810821a0 T find_task_by_vpid
ffffffff81082170 T find_task_by_pid_ns
ffffffff811c8f10 T d_absolute_path
</pre>

<p>Please proceed if these addresses are correct. Otherwise, please contact the author since AKARI module will not work even if you continue.</p>

<p>If akari_test.ko was not loaded successfully, error messages like below are printed. In this case, please contact the author since AKARI module will not work even if you continue:</p>

<pre class="command">
# dmesg -c &gt; /dev/null
# modprobe akari_test
</pre>
<pre class="output">
FATAL: Error inserting akari_test (/lib/modules/2.6.32/extra/akari_test.ko): Invalid argument
</pre>
<pre class="command">
# dmesg
</pre>
<pre class="output">
Sorry, I couldn't guess dependent symbols.
I need some changes for supporting your environment.
Please contact the author.
</pre>

<h3><a name="3.3">3.3. Install the userspace tools</a></h3>

<p>Make sure the dependencies described above have been installed. Compile and install the tools with the following commands. (Please use USRLIBDIR=<code>/usr/lib</code> or USRLIBDIR=<code>/usr/lib32</code> if needed):</p>

<pre class="command">
$ wget -O ccs-tools-1.8.4-20150505.tar.gz 'http://osdn.jp/frs/redir.php?f=/tomoyo/49693/ccs-tools-1.8.4-20150505.tar.gz'
$ wget -O ccs-tools-1.8.4-20150505.tar.gz.asc 'http://osdn.jp/frs/redir.php?f=/tomoyo/49693/ccs-tools-1.8.4-20150505.tar.gz.asc'
$ gpg ccs-tools-1.8.4-20150505.tar.gz.asc
$ tar -zxf ccs-tools-1.8.4-20150505.tar.gz
$ cd ccs-tools/
$ make -s USRLIBDIR=/usr/lib64
$ su
# make -s USRLIBDIR=/usr/lib64 install
</pre>

<h3><a name="3.4">3.4. Initializing configuration</a></h3>

<p>You will probably want to add the location of the userspace tools (/usr/sbin) to your PATH so that the commands can be run easily. If you are using bash, append the following line to ~/.bashrc:</p>

<pre>
export PATH=$PATH:/usr/sbin
</pre>

<p>Before you can make use of AKARI, an initialization procedure must take place. This prepares the files in which policy information will be stored. All policy files are stored in the "/etc/ccs/" directory.</p>

<p>One of two commands can be used to initialize configuration. The command you use depends on what operations you wish to analyze or restrict.</p>

<p>Some users may wish to <strong>restrict only file-related operations</strong>, such as read, write and execute. This is suitable for users wanting to keep policy simpler or do not require the full functionality of AKARI. If you chose to restrict only file-related operations, then you may ignore parts of this guide that are not relevant, such as network operations. In this case, policy can be initialized using this command:</p>

<pre class="command">
# /usr/lib64/ccs/init_policy --file-only-profile --module_name=akari
</pre>

<p>Other users may wish to <strong>make use of all the restrictive capabilities of AKARI</strong>, and may want to analyze or restrict all possible operations (e.g. files, networks, environment variables). This is suitable for users wanting to secure their system as much as possible. This is also what this guide generally assumes the reader has chosen. In this case, run the following command:</p>

<pre class="command">
# /usr/lib64/ccs/init_policy --module_name=akari
</pre>

<p>After running one of the above commands, you should see the following output:</p>

<pre class="command">
# /usr/lib64/ccs/init_policy --module_name=akari
</pre>
<pre class="output">
Creating policy directory... OK
Creating configuration directory... OK
Creating exception policy... OK
Creating domain policy... OK
Creating manager policy... OK
Creating default profile... OK
Creating stat policy... OK
Creating module loader... OK
Creating configuration file for ccs-editpolicy ... OK
Creating configuration file for ccs-auditd ... OK
Creating configuration file for ccs-patternize ... OK
Creating configuration file for ccs-notifyd ... OK
</pre>

<h3><a name="3.5">3.5. Configuring your bootloader</a></h3>

<p>On systems where use of init= kernel boot option causes boot failures (e.g. RHEL 7), you need to choose <a href="#3.5.1">Loading AKARI's module from initramfs</a>. On systems where it does not cause boot failures (e.g. RHEL 6), you can choose <a href="#3.5.2">Loading AKARI's module from the init process</a>.</p>

<h4><a name="3.5.1">3.5.1.  Loading AKARI's module from initramfs</a></h4>

<p>If your system is using dracut, create /etc/dracut.conf.d/akari.conf like below and rebuild the initramfs:</p>

<pre class=command>
# echo 'add_drivers+=" akari "' &gt; /etc/dracut.conf.d/akari.conf
# dracut -f --kver ${VERSION}
</pre>

<p>Now edit your bootloader (e.g. GRUB) to add "rd.driver.pre=akari" to the kernel boot options. An example is shown below:</p>

<p>Before:</p>
<pre>
linux16 /boot/vmlinuz-3.10.0-123.1.2.el7.x86_64 ro root=LABEL=/
</pre>

<p>After:</p>
<pre>
linux16 /boot/vmlinuz-3.10.0-123.1.2.el7.x86_64 ro root=LABEL=/ rd.driver.pre=akari
</pre>

<p>You may directly edit /boot/grub2/grub.cfg file. But it is recommended that you also edit GRUB_CMDLINE_LINUX line in <code>/etc/default/grub</code> file like below in case you update kernel packages in the future:</p>

<p>Before:</p>
<pre>
GRUB_CMDLINE_LINUX="vconsole.keymap=us crashkernel=auto  vconsole.font=latarcyrheb-sun16 rhgb quiet"
</pre>

<p>After:</p>
<pre>
GRUB_CMDLINE_LINUX="vconsole.keymap=us crashkernel=auto  vconsole.font=latarcyrheb-sun16 rhgb quiet rd.driver.pre=akari"
</pre>

<h4><a name="3.5.2">3.5.2.  Loading AKARI's module from the init process</a></h4>

<p>Create <code>/sbin/akari-init</code> like below. (Please use /bin/modprobe if modprobe in your system is located at /bin rather than /sbin.):</p>

<pre class=command>
# echo '#! /bin/sh' &gt; /sbin/akari-init
# echo '/sbin/modprobe akari &amp;&amp; exec /sbin/init "$@"' &gt;&gt; /sbin/akari-init
# chmod 755 /sbin/akari-init
</pre>

<p>Please create <code>/sbin/akari-init</code> like below if your system is using <code>/usr/lib/systemd/systemd</code> rather than <code>/sbin/init</code>:</p>

<pre class=command>
# echo '#! /bin/sh' &gt; /sbin/akari-init
# echo '/sbin/modprobe akari &amp;&amp; exec /usr/lib/systemd/systemd "$@"' &gt;&gt; /sbin/akari-init
# chmod 755 /sbin/akari-init
</pre>

<p>Now edit your bootloader (e.g. GRUB) to add "init=/sbin/akari-init" to the kernel boot options. An example is shown below:</p>

<p>Before:</p>
<pre>
kernel /boot/vmlinuz-2.6.32-431.17.1.el6.x86_64 ro root=LABEL=/
</pre>

<p>After:</p>
<pre>
kernel /boot/vmlinuz-2.6.32-431.17.1.el6.x86_64 ro root=LABEL=/ init=/sbin/akari-init
</pre>

<h3><a name="3.6">3.6. Rebooting your system</a></h3>

<p>Now you have finished all preparation. You can't wait any more? Now it's time to make use of your newly installed kernel. Reboot your system and choose the entry with AKARI kernel at the GRUB screen, or at whatever other bootloader you have installed.</p>

<p>You will find messages like below when <code>/usr/lib/systemd/systemd</code>  or <code>/sbin/init</code> starts. (The content of messages depends on your environment.):</p>

<pre class="output">
AKARI: 1.0.34   2015/05/05
Access Keeping And Regulating Instrument registered.
Calling /sbin/ccs-init to load policy. Please wait.
CCSecurity: 1.8.4   2015/05/05
Mandatory Access Control activated.
</pre>

<p>Note that you won't be able to see AKARI's messages if you are using "quiet" or "rhgb" kernel boot option because these options prevent most of kernel messages from being printed.</p>

<p>Although AKARI is a LSM module, AKARI can coexist with other LSM modules. However, you need to also add "selinux=0" to the kernel boot options if you disable SELinux by specifying SELINUX=disabled in /etc/selinux/config . This is because the init process unregisters LSM hooks which AKARI module depends on if SELINUX=disabled is specified in /etc/selinux/config .</p>

<h3><a name="3.7">3.7. How can I disable/uninstall AKARI?</a></h3>

<p>If your system becomes unable to boot during the course of this guide or any time in the future, it may be due to policy configuration or something related to AKARI. If this is the case, it is possible that the kernel can still be booted by disabling AKARI. This can be done by removing "rd.driver.pre=akari" or "init=/sbin/akari-init" at the kernel command-line parameters.</p>

</div><!-- documentation -->

</div><!-- content -->

<div id="navfooter">
<hr>
<table>
<tr>
<td class="docs-previous">
<a href="chapter-2.html.en">Prev</a>
</td>
<td class="docs-index">
<a href="index.html.en">Index</a>
</td>
<td class="docs-next">
<a href="chapter-4.html.en">Next</a>
</td>
</tr>
<tr>
<td class="docs-previous-description">
<p>Chapter 2: Why do I need AKARI?</p>
</td>
<td class="docs-home">
</td>
<td class="docs-next-description">
<p>Chapter 4: How does AKARI work?</p>
</td>
</tr>
</table>
</div>

<div id="footer">
<p class="language">Go to <a href="chapter-3.html.ja">Japanese page</a>.</p>
<p class="timestamp">Last modified: $Date$</p>
<p class="trademark">Linux&reg; is a registered trademark of Linus Torvalds world-wide. TOMOYO&reg; is a registered trademark of <a href="http://www.nttdata.co.jp/en/">NTT DATA Corporation</a>.</p>
<p><a href="http://osdn.jp/"><img src="http://osdn.jp/sflogo.php?group_id=5310" width="96" height="31" alt="sflogo.php" title="SourceForge.jp"></a></p>
</div>

</body>
</html>
