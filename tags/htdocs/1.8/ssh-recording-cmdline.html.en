<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en-US">
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="content-style-type" content="text/css">
<link rel="stylesheet" href="../media/tomoyolinux.css" media="all" type="text/css">
<title>TOMOYO Linux 1.8.x : Recording command-line for SSH sessions</title>
</head>

<body>

<div id="titlebar">
<a href="../index.html.en"><img src="../media/tomoyotitle.png" alt="tomoyotitle.png" width="320" height="40" border="0" align="left"></a>
</div>

<div id="navbar" class="tomoyo-documentation">
<ul id="navbarlist">
<li id="tomoyo-home"><a href="../index.html.en" title="TOMOYO Linux Home Page">Home</a></li>
<li id="tomoyo-about"><a href="../about.html.en" title="About TOMOYO Linux">About</a></li>
<li id="tomoyo-download"><a href="../download.html.en" title="Get TOMOYO Linux">Download</a></li>
<li id="tomoyo-changelogs"><a href="../changelogs.html.en" title="TOMOYO Linux ChangeLogs">ChangeLogs</a></li>
<li id="tomoyo-documentation"><a href="../documentation.html.en" title="Official Documentation">Documentation</a></li>
<li id="tomoyo-support"><a href="../support.html.en" title="Support information">Support</a></li>
<li id="tomoyo-links"><a href="../links.html.en" title="Links">Links</a></li>
</ul>
<ul id="switch-language">
<li id="tomoyo-switch-language"><a href="ssh-recording-cmdline.html.ja" title="Go to Japanese page">Japanese page</a></li>
</ul>
</div>

<div id="content">

<div id="regular-content">

<h2>Recording command-line for SSH sessions</h2>

<h3>About this page</h3>

<p>This page explains you how to record commandline for SSH login sessions.</p>

<h3>Step 1: Compiling the program</h3>

<p>Compile the below program. In this page, we assume the location of compiled program as /bin/record_cmdline . We assume the location of SSH server program as /usr/sbin/sshd . We assume the location of login shell program as /bin/bash .</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;syslog.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/file.h&gt;
#include &lt;fcntl.h&gt;

static void encode(char *buffer, const char *string)
{
	while (1) {
		const unsigned char c = *(const unsigned char *) string++;
		if (!c)
			break;
		else if (c == '\\') {
			*buffer++ = '\\';
			*buffer++ = '\\';
		} else if (c &gt; 32 &amp;&amp; c &lt; 127)
			*buffer++ = c;
		else {
			*buffer++ = '\\';
			*buffer++ = '0' + (c &gt;&gt; 6);
			*buffer++ = '0' + ((c &gt;&gt; 3) &amp; 7);
			*buffer++ = '0' + (c &amp; 7);
		}
	}
}

int main(int raw_argc, char *raw_argv[])
{
	int i;
	int argc;
	int envc;
	char *filename;
	char **argv;
	char **envp;
	{ /* Check that I'm an execute handler process.  */
		int fd = open("/proc/ccs/.execute_handler", O_RDONLY);
		close(fd);
		if (fd == EOF) {
			fprintf(stderr, "FATAL: I'm not execute_handler.\n");
			return 1;
		}
	}
	if (raw_argc &lt; 7)
		return 1;
	filename = raw_argv[4];
	argc = atoi(raw_argv[5]);
	envc = atoi(raw_argv[6]);
	if (raw_argc != argc + envc + 7)
		return 1;
	for (i = 5; i &lt; argc + 5; i++)
		raw_argv[i] = raw_argv[i + 2];
	raw_argv[argc + 5] = NULL;
	for (i = argc + 6; i &lt; argc + envc + 6; i++)
		raw_argv[i] = raw_argv[i + 1];
	raw_argv[argc + envc + 6] = NULL;
	argv = raw_argv + 5;
	envp = raw_argv + argc + 6;

	{ /* Record parameters including argv[] and envp[]. */
		/* Get exlusive lock for serializing syslog(). */
		const int fd = open("/proc/self/exe", O_RDONLY);
		if (fd == EOF || flock(fd, LOCK_EX) == EOF)
			return 1;
		openlog(raw_argv[0], LOG_NDELAY, LOG_USER);
                syslog(LOG_INFO, "Domain = %s\n", raw_argv[1]);
                syslog(LOG_INFO, "Caller Program = %s\n", raw_argv[2]);
                syslog(LOG_INFO, "Process Status = %s\n", raw_argv[3]);
                syslog(LOG_INFO, "Requested Program = %s\n", filename);
                syslog(LOG_INFO, "argc=%d\n", argc);
                syslog(LOG_INFO, "envc=%d\n", envc);
		for (i = 0; i &lt; argc; i++) {
			int max_len = strlen(argv[i]) * 4 + 128;
			int len;
			char *buffer = calloc(max_len, 1);
			if (!buffer)
				return 1;
			len = snprintf(buffer, 100, "argv[%d] = \"", i);
			encode(buffer + len, argv[i]);
			len = strlen(buffer);
			snprintf(buffer + len, max_len - len - 1, "\"");
			syslog(LOG_INFO, "%s\n", buffer);
			free(buffer);
		}
		for (i = 0; i &lt; envc; i++) {
			int max_len = strlen(envp[i]) * 4 + 128;
			int len;
			char *buffer = calloc(max_len, 1);
			if (!buffer)
				return 1;
			len = snprintf(buffer, 100, "envp[%d] = \"", i);
			encode(buffer + len, envp[i]);
			len = strlen(buffer);
			snprintf(buffer + len, max_len - len - 1, "\"");
			syslog(LOG_INFO, "%s\n", buffer);
			free(buffer);
		}
		closelog();
		/* Release exclusive lock. */
		close(fd);
	}

	/* Execute requested program. */
	execve(filename, argv, envp);
	fprintf(stderr, "ERROR: Can't execute %s .\n", filename);
	return 1;
}
</pre>

<h3>Step 2: Install and initialize TOMOYO Linux</h3>

<p><a href="chapter-3.html.en">Install TOMOYO Linux</a> and run below commandline in order to initialize TOMOYO Linux.</p>

<pre class="command">
# /usr/lib/ccs/init_policy
</pre>

<p>Then, please do below operations before you reboot using TOMOYO Linux kernel.</p>

<p>Append below line to /etc/ccs/exception_policy.conf in order to initialize domain transition when /usr/sbin/sshd is executed.</p>

<pre>
initialize_domain /usr/sbin/sshd from any
</pre>

<p>Append below line to /etc/ccs/exception_policy.conf in order to suppress domain transition after login shell which is executed by SSH server.</p>

<pre>
keep_domain any from &lt;kernel&gt; /usr/sbin/sshd /bin/bash
</pre>

<p>Append below lines to /etc/ccs/domain_policy.conf so that program execution requests from login shell which is executed by SSH server are passed to /bin/record_cmdline .</p>

<pre>
&lt;kernel&gt; /usr/sbin/sshd /bin/bash
task auto_execute_handler /bin/record_cmdline
</pre>

<h3>Step 3: Operation</h3>

<p>Now, you are ready to start operation. Please reboot using TOMOYO Linux kernel.</p>

<p>Login via SSH and do some operations. You can confirm that commandline parameters are recorded by doing below commandline.</p>

<pre class="command">
# grep record_cmdline /var/log/messages
</pre>

<h3>Explanation</h3>

<p>TOMOYO Linux's execute_handler functionality intercepts program execution requests from login shell which in executed by SSH server and passes the program execution requests to /bin/record_cmdline . Then, /bin/record_cmdline records parameters passed to program execution requests and actually executes the requested programs.</p>

<h3>Application idea</h3>

<p>You can customize /bin/record_cmdline to accept or deny program execution requests based on commandline arguments because parameters passed to execution requests are passed to /bin/record_cmdline .</p>

</div><!-- regular-content -->

</div><!-- content -->

<div id="navfooter">
<hr>
<table>
<tr>
<td class="docs-previous">
</td>
<td class="docs-index">
<a href="index.html.en">Index</a>
</td>
<td class="docs-next">
</td>
</tr>
<tr>
<td class="docs-previous-description">
</td>
<td class="docs-home">
</td>
<td class="docs-next-description">
</td>
</tr>
</table>
</div>

<div id="footer">
<p class="language">Go to <a href="ssh-recording-cmdline.html.ja">Japanese page</a>.</p>
<p class="timestamp">Last modified: $Date: 2011-02-12 08:45:11 +0000 (Sat, 12 Feb 2011) $</p>
<p class="trademark">Linux&reg; is a registered trademark of Linus Torvalds world-wide. TOMOYO&reg; is a registered trademark of <a href="http://www.nttdata.co.jp/en/">NTT DATA Corporation</a>.</p>
<p><a href="http://sourceforge.jp/"><img src="http://sourceforge.jp/sflogo.php?group_id=1973" width="96" height="31" alt="SourceForge.jp"></a></p>
</div>

</body>
</html>
