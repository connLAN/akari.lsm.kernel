<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>AKARI Install manual</title>
<link rel="stylesheet" href="http://akari.sourceforge.jp/akari.css" media="all" type="text/css">
</head>
<body>
<p style="text-align:right;"><a href="initialize.html.ja">Japanese Page</a></p>
<p style="text-align:right;">Last modified: $Date$</p>
<h1>Phase 2: Initializing configuration.</h1>

<p>This page describes basic operations needed for using AKARI.</p>

<hr>

<h2>Step 1: Initializing Policy</h2>

<p>Run below command in order to initialize policy.</p>

<table border="1">
<tr><td>
[root@akari ~]# /usr/lib/ccs/init_policy
</td></tr>
</table>

<p>AKARI's policy files will be saved in /etc/ccs/ directory.</p>

<p>Rewrite from ccsecurity in /etc/ccs/ccs-load-module to akari .</p>

<table border="1">
<tr><td>
[root@akari ~]# sed -i -e 's/ccsecurity/akari/' /etc/ccs/ccs-load-module
</td></tr>
</table>

<hr>

<h2>Step 2: Learning how to use AKARI's policy editor</h2>

<p>Run AKARI's policy editor "ccs-editpolicy" with "/etc/ccs/" option, and you will see a picture shown below.</p>

<table border="1">
<tr><td>
[root@akari ~]# /usr/sbin/ccs-editpolicy /etc/ccs/
</td></tr>
</table>

<p><img src="editpolicy-domain-list1.png" width="720" height="400"></p>

<p>This picture describes the domain tree. As of now, only "&lt;kernel&gt;" domain is defined. But as the system runs, AKARI will create domains and add them to the tree. The example picture shown below has many domains.</p>

<p><img src="editpolicy-domain-list2.png" width="720" height="400"></p>

<p>The access analysis/restriction in AKARI is applied in the units of domains. Every process belongs to single domain, and basically the process will transit to different domain whenever it executes a program. The name of a domain is a concatenated string expression for the process execution history. For example, the name of domain which the kernel belongs to is "&lt;kernel&gt;", the name of domain which /sbin/init invoked by the kernel belongs to is "&lt;kernel&gt; /sbin/init", the name of domain which /etc/rc.d/rc invoked by the /sbin/init belongs to is "&lt;kernel&gt; /sbin/init /etc/rc.d/rc". The exceptions of this transition rule are described later.</p>

<p>Look at the number which are the second column of each line.</p>

<p><img src="editpolicy-domain-profile-number.png" width="720" height="400"></p>

<p>This number is called "profile number". A profile number is an integer value which takes between 0 and 255.</p>

<p>Press "w" key, and you will see some choices.</p>

<p><img src="editpolicy-window-list.png" width="720" height="400"></p>

<p>Press "p" key, and you will see the list of profiles.</p>

<p><img src="editpolicy-profile-list.png" width="720" height="400"></p>

<table border="1">
<tr><td>Name</td><td>Control</td></tr>
<tr>
<td>PREFERENCE::audit</td>
<td>Configuration of auditing preference.</td>
</tr>
<tr>
<td>PREFERENCE::learning</td>
<td>Configuration of learning mode.</td>
</tr>
<tr>
<td>PREFERENCE::enforcing</td>
<td>Configuration of enforcing mode.</td>
</tr>
<tr>
<td>COMMENT</td>
<td>A line of text that describes the content of the profile.</td>
</tr>
<tr>
<td>CONFIG</td>
<td>Configuration of access control level.</td>
</tr>
</table>
<p>You can give the following values for mode= parameter of CONFIG line.</p>
<table border="1">
<tr>
<td>Value</td>
<td>Meaning</td>
</tr>
<tr>
<td>disabled</td>
<td>Disabled. Works as if regular kernel.</td>
</tr>
<tr>
<td>learning</td>
<td>Learning mode. Do not reject an access request if the request violates policy. Append the request to policy.</td>
</tr>
<tr>
<td>permissive</td>
<td>Permissive mode. Do not reject an access request if the request violates policy. Do not append the request to policy.</td>
</tr>
<tr>
<td>enforcing</td>
<td>Enforcing mode. Reject an access request if the request violates policy. Do not append the request to policy.</td>
</tr>
</table>

<p>Press "w" key, then press "e" key, and you will see the picture shown below.</p>

<p><a href="editpolicy-exception-full.png">(Click to view complete screen.)<br><img src="editpolicy-exception-list1.png" width="720" height="400"></a></p>

<p>You can scroll this window using arrow keys and/or Home/End/PageUp/PageDown keys.</p>

<p>This screen contains the following types of macros and exceptions.</p>

<table border="1">
<tr><td>
(1) Pathname group
</td><td>
<p>You can specify pathname groups using "path_group" directive. This is a macro to reduce the amount of domain policy by grouping multiple pathnames using group names.</p>
</td></tr><tr><td>
(2) Number group
</td><td>
<p>You can specify number groups using "number_group" directive. This is a macro to reduce the amount of domain policy by grouping multiple numbers using group names.</p>
</td></tr><tr><td>
(3) Address group
</td><td>
<p>You can specify IPv4 or IPv6 address groups using "address_group" directive. This is a macro to reduce the amount of domain policy by grouping multiple addresses using group names.<br>
</td></tr><tr><td>
(4) ACL group
</td><td>
<p>You can specify permissions using "acl_group" directive followed by group number and permissions for that group. The ACL group is referenced by "use_group" directive in the domain policy. This is a macro to reduce the amount of domain policy by grouping commonly granted permissions.</p>
</td></tr><tr><td>
(5) Program aggregations
</td><td>
<p>Basically, each program's pathname is used for domain transitions. But you can aggregate multiple program's pathnames into single program's pathname as needed using "aggregator" directive.</p>
</td></tr><tr><td>
(6) Domain transition exceptions
</td><td>
<p>Basically, domain transition occurs whenever a program is executed. But you can suppress or initialize domain transitions as needed.</p>
<p>You can specify programs that initialize the domain transition history using "initialize_domain" directive. For example, if "initialize_domain /usr/sbin/sshd" is specified, /usr/sbin/sshd will run under "&lt;kernel&gt; /usr/sbin/sshd" domain.</p>
<p>You can deny the effect of "initialize_domain" directive using "no_initialize_domain" directive. You can use "no_initialize_domain" directive when you don't want to initialize domain transition history under specific conditions.</p>
<p>You can specify domains that suppress domain transition using "keep_domain" directive. For example, if "keep_domain &lt;kernel&gt; /usr/sbin/sshd /bin/tcsh" is specified, any process that belongs to "&lt;kernel&gt; /usr/sbin/sshd /bin/tcsh" domain stays at that domain unless programs specified using "initialize_domain" directive are executed.</p>
<p>You can deny the effect of "keep_domain" directive using "no_keep_domain" directive. You can use "no_keep_domain" directive when you don't want to suppress domain transition under specific conditions.</p>
</td></tr>
</table>

<p>Press "q" key to finish the policy editor.</p>

<p>Please see the policy editor's tutorial page <a href="tool-editpolicy.html.en">How to use Policy Editor</a> as needed.</p>

<hr>

<h2><a name="configure_audit_daemon">Step 3: Configure to save AKARI's audit logs (Optional)</a></h2>

<p>AKARI can record "access granted logs" (access requests that didn't violate domain policy) and "access rejected logs" (access requests that violated domain policy).<br>
The logs are in the form of domain policy so that the logs can be directly appended to domain policy. Add the "access rejected logs" to domain policy if you consider you should allow the access.</p>

<p>You can give the following values for grant_log= parameter of CONFIG line.</p>
<table border="1">
<tr>
<td>Value</td>
<td>Meaning</td>
</tr>
<tr>
<td>no</td>
<td>Don't record "access granted logs" unless "grant_log=yes" is explicitly specified in the individual ACL entry.</td>
</tr>
<tr>
<td>yes</td>
<td>Record "access granted logs" unless "grant_log=no" is explicitly specified in the individual ACL entry.</td>
</tr>
</table>
<p>You can give the following values for reject_log= parameter of CONFIG line.</p>
<table border="1">
<tr>
<td>Value</td>
<td>Meaning</td>
</tr>
<tr>
<td>no</td>
<td>Don't record "access rejected logs".</td>
</tr>
<tr>
<td>yes</td>
<td>Record "access rejected logs".</td>
</tr>
</table>

<p>You can use a daemon program that reads from /proc/ccs/grant_log and /proc/ccs/reject_log and writes to files. Run in the following way from (for example) /etc/rc.local .</p>

<table border="1">
<tr><td>
/usr/sbin/ccs-auditd $location_to_store_access_granted_logs $location_to_store_access_rejected_logs
</td></tr>
</table>

<p>You may give PREFERENCE::audit={ max_grant_log=0 } for profiles and give /dev/null for $location_to_store_access_granted_logs if you don't want "access granted logs". Since "ccs-auditd" doesn't have filtering functions, be careful with the disk's free space if you want to save "access granted logs".</p>

<p>You may give PREFERENCE::audit={ max_reject_log=0 } for profiles and give /dev/null for $location_to_store_access_rejected_logs if you don't want "access rejected logs". But I recommend you to save "access rejected logs". This manual assumes that "access rejected logs" is saved in /var/log/ccs/reject_log.conf .</p>

<table border="1">
<tr><td>
/usr/sbin/ccs-auditd /dev/null /var/log/ccs/reject_log.conf
</td></tr>
</table>

<p>Create directories manually for storing access logs.</p>

<table border="1">
<tr><td>
[root@akari ~]# mkdir -p /var/log/ccs
</td></tr>
</table>

<p>If you want to rotate using "logrotate", create /etc/logrotate.d/akari with the following content. Be sure to give "nocreate" option, or logs after the first rotation will not be saved.</p>

<table border="1">
<tr><td>
/var/log/ccs/reject_log.conf {<br>
&nbsp;&nbsp;weekly<br>
&nbsp;&nbsp;rotate 9<br>
&nbsp;&nbsp;missingok<br>
&nbsp;&nbsp;notifempty<br>
&nbsp;&nbsp;nocreate<br>
}
</td></tr>
</table>

<p>If you don't want neither "access granted logs" nor "access rejected logs", you needn't to run "ccs-auditd" and you can give PREFERENCE::audit={ max_grant_log=0 max_reject_log=0 } for profiles to save memory and improve performance.</p>

<hr>

<h2>Step 4: Reboot the system</h2>

<p>Now, reboot.</p>

<table border="1">
<tr><td>
[root@akari ~]# reboot
</td></tr>
</table>

<hr>

<p><a href="index.html.en">Return to index page.</a></p>
<p><a href="http://sourceforge.jp/"><img src="http://sourceforge.jp/sflogo.php?group_id=1973" width="96" height="31" alt="SourceForge.jp"></a></p>
</body>
</html>
