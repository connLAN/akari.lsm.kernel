<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="ja-JP">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>AKARI 導入手順書</title>
<link rel="stylesheet" href="http://tomoyo.osdn.jp/tomoyo.css" media="all" type="text/css">
</head>
<body>
<p style="text-align:right;"><a href="learning.html.en">English Page</a></p>
<p style="text-align:right;">Last modified: $Date$</p>
<h1>第３章：システムの振る舞いを解析</h1>

<p>このページでは、 AKARI の学習モードの使い方について説明します。</p>

<hr>

<h2>ステップ１：ドメインを作成する</h2>

<p>AKARI 対応カーネルで再起動したら、 root としてログインしてください。</p>

<p>どのアプリケーションを解析／保護の対象とするかを決めてください。</p>

<p>以下の手順は CentOS 5.6 環境で Apache を保護する場合で説明します。</p>

<p>対象となるアプリケーションを開始させます。</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# service httpd start
</td></tr>
</table>

<p>AKARI のポリシーエディタを実行してください。今回は現在カーネル内に存在しているポリシーを直接編集するので、 /etc/ccs/ というコマンドラインオプションを指定していないことに注意してください。</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# /usr/sbin/ccs-editpolicy
</td></tr>
</table>

<p>CentOS 5.6 では、 Apache プログラムパス名は /usr/sbin/httpd です。<br>
矢印キーや Home/End/PageUp/PageDown キーを使ってカーソルをスクロールして、 /usr/sbin/httpd の行を見つけてください。この絵では 386 行目です。</p>

<p><img src="editpolicy-httpd-profile0.png" alt="editpolicy-httpd-profile0.png" width="720" height="400"></p>

<p>もし、 /usr/sbin/httpd が initialize_domain キーワードで指定されていた場合、 /usr/sbin/httpd を実行することにより &lt;kernel&gt; /usr/sbin/httpd という名前のドメインが作成されます。もし指定されていなかった場合、実行したドメインの子ドメイン（例えば &lt;kernel&gt; /usr/sbin/mingetty /bin/login /bin/bash ドメインから /usr/sbin/httpd を実行した場合は &lt;kernel&gt; /usr/sbin/mingetty /bin/login /bin/bash /usr/sbin/httpd ）が作成されます。この手順書では /usr/sbin/httpd が initialize_domain に指定されている場合で説明します。詳細については<a href="tool-editpolicy.html.ja#Initialize_domain_transition">ドメイン遷移を初期化する方法について</a>を参照してください。</p>

<p>s キーを押してから 1 と入力し、 Enter キーを押してください。</p>

<p><img src="editpolicy-httpd-set-profile1.png" alt="editpolicy-httpd-set-profile1.png" width="720" height="400"></p>

<p>/usr/sbin/httpd のプロファイル番号が 1 に変化しました。</p>

<p><img src="editpolicy-httpd-profile1.png" alt="editpolicy-httpd-profile1.png" width="720" height="400"></p>

<p>@ キーを押してプロセス一覧表示に切り替えてください。そして、 /usr/sbin/httpd プロセスに対してプロファイル 1 が割り当てられていることを確認してください。</p>

<p><img src="editpolicy-httpd-process1.png" alt="editpolicy-httpd-process1.png" width="720" height="400"></p>

<p>q キーを押してポリシーエディタを終了してください。</p>

<hr>

<h2>ステップ２：必要なアクセス許可を収集する</h2>

<p>Apache の起動時／終了時に必要となるアクセス許可を学習させるために、 Apache を再起動します。</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# service httpd restart
</td></tr>
</table>

<p>ポリシーエディタを実行し、 /usr/sbin/httpd の行へ移動してください。（あなたやシステムが実行したプログラムによりドメインが追加されることで、行番号が変化しているかもしれません。）</p>

<p>Enter キーを押すと、現在までに収集されたアクセス許可が表示されます。</p>

<p><a href="editpolicy-httpd-full.png">（クリックすると全体を表示します。）<br><img src="editpolicy-httpd-acl1.png" alt="editpolicy-httpd-acl1.png" width="720" height="400"></a></p>

<p>q キーを押してポリシーエディタを終了してください。</p>

<p><img src="operation-learning.png" alt="operation-learning.png" width="689" height="907"></p>

<p>Apache は通常の使い方をするのに必要なアクセス許可を生成できるようになっています。この状態で、 Apache に対して許可したい操作を全て行ってください。</p>

<p>収集されたアクセス許可はカーネル内のメモリにしか存在しないため、時々ポリシーファイルとしてディスク上に保存することを忘れないでください。システムを再起動した場合、カーネル内のメモリに存在しているアクセス許可は失われます。</p>

<p>現在カーネル内のメモリに存在しているポリシーをディスク上に保存するには、 ccs-savepolicy コマンドを利用します。</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# /usr/sbin/ccs-savepolicy
</td></tr>
</table>

<p>ccs-savepolicy コマンドを実行することにより、４個のファイル（ exception_policy.conf domain_policy.conf profile.conf manager.conf ）が /etc/ccs/ ディレクトリ内に作成されます。より正確に言うと、これらは作成時刻をパス名の中に含んだ通常ファイルへのシンボリックリンクとして作成されます。</p>

<p>ディスク上に保存されているポリシーをカーネル内のメモリに読み込ませるには、 ccs-loadpolicy コマンドを利用します。</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# /usr/sbin/ccs-loadpolicy -df &lt; /etc/ccs/domain_policy.conf<br>
[root@tomoyo ~]# /usr/sbin/ccs-loadpolicy -ef &lt; /etc/ccs/exception_policy.conf<br>
[root@tomoyo ~]# /usr/sbin/ccs-loadpolicy -p &lt; /etc/ccs/profile.conf<br>
[root@tomoyo ~]# /usr/sbin/ccs-loadpolicy -m &lt; /etc/ccs/manager.conf<br>
</td></tr>
</table>

<p>-df オプションは /proc/ccs/domain_policy を上書きします。 -ef オプションは /proc/ccs/exception_policy を上書きします。 -p オプションは /proc/ccs/profile に追記します。 -m オプションは /proc/ccs/manager に追記します。もちろん、読み込ませたいものだけを読み込ませることができます。致命的な操作ミスを防ぐために、 -pf および -mf というオプションはサポートされていません。</p>

<p>コンソール上に以下のようなメッセージが表示される場合があります。</p>

<table border="1">
<tr><td>
WARNING: Domain '&lt;kernel&gt; /usr/sbin/httpd' has too many ACLs to hold. Stopped learning mode.
</td></tr>
</table>

<p>これは、学習モードが全てのカーネルのメモリを消費してしまったり、ポリシーとの比較処理のために使い物にならないくらい応答が遅くなったりすることを予防するための安全装置です。プロファイルの max_learning_entry の値を増やすことで学習を再開できます。しかし、何も考えずに max_learning_entry の値を増やしてしまうと、メモリ消費が増え、応答が悪くなります。そのため、 max_learning_entry の値を増やす前に、ポリシーのチューニングを行ってください。以下に、ポリシーのチューニングを行う手順について説明します。</p>

<hr>

<h2>ステップ３：テンポラリファイルに対処する</h2>

<p>テンポラリファイルのように毎回異なるファイル名を持つ場合や、クライアントプログラムが利用するテンポラリなポート番号については、学習モードと確認モードでは対処できません。<a href="tool-editpolicy.html.ja#acl_editor">ポリシーエディタのパターン化支援機能</a>を用いて対話的に対処する必要があります。</p>

<p>ただし、以下に示すように、非対話的にテンポラリファイルのパス名をパターン化することもできます。</p>

<p>/usr/sbin/ccs-findtemp コマンドを利用して、テンポラリファイルの可能性があるパス名を抽出します。</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# /usr/sbin/ccs-findtemp &lt; /proc/ccs/domain_policy<br>
/tmp/RsACr8YD<br>
/tmp/RsXg3Aav<br>
/var/run/nscd/socket<br>
/var/spool/clientmqueue/dfoBPETPpH002933<br>
/var/spool/clientmqueue/dfoBPETf92002944<br>
/var/spool/clientmqueue/qfoBPETPpH002933<br>
/var/spool/clientmqueue/qfoBPETf92002944<br>
/var/spool/clientmqueue/xfoBPETPpH002933<br>
/var/spool/clientmqueue/xfoBPETf92002944
</td></tr>
</table>

<p>この例では、 /tmp/RsACr8YD /tmp/RsXg3Aav /var/spool/clientmqueue/dfoBPETPpH002933 /var/spool/clientmqueue/dfoBPETf92002944 /var/spool/clientmqueue/qfoBPETPpH002933 /var/spool/clientmqueue/qfoBPETf92002944 /var/spool/clientmqueue/xfoBPETPpH002933 /var/spool/clientmqueue/xfoBPETf92002944 がテンポラリファイルであると考えられます。そのため、これらのパス名をパターン化します。</p>

<p>最初に、どのようなパターンを利用するかを決めます。この例では、ランダムな文字列が使用されていると考えられます。そのため、 / 以外の任意の１文字に一致する \? と / 以外の任意の０文字以上に一致する \* が妥当だと考えられます。詳細については<a href="policy-reference.html.ja#wildcard_expression_rules">パターンの表記規則</a>を参照してください。</p>

<p>/usr/sbin/ccs-patternize コマンドを利用して、非対話的にパターン化処理を行うことができます。パターン化の規則は /etc/ccs/tools/patternize.conf に記録されています。以下に初期設定を示します。</p>

<pre>
# This file contains rewriting rules used by ccs-patternize command.

# Domain policy consists with domain declaration lines (which start with
# &lt;kernel&gt; ) and acl declaration lines (which do not start with &lt;kernel&gt; ).
# You can refer the former using 'domain' keyword and the latter using 'acl'
# keyword.
#
# Words in each line are separated by a space character. Therefore, you can
# use 'domain[index]', 'acl[index]' for referring index'th word of the line.
# The index starts from 1, and 0 refers the whole line (i.e.
# 'domain[0]' = 'domain', 'acl[0]' = 'acl').
#
# Three operators are provided for conditional rewriting.
# '.contains' is for 'fgrep keyword' match.
# '.equals' is for 'grep ^keyword$' match.
# '.starts' is for 'grep ^keyword' match.
#
# Rewriting rules are defined using multi-lined chunks. A chunk is terminated
# by a 'rewrite' line which specifies old pattern and new pattern.
# A 'rewrite' line is evaluated only when all preceding 'domain' and 'acl'
# lines in that chunk have matched.
# Evaluation stops at first 'rewrite' line where a word matched old pattern.
# Therefore, no words are rewritten more than once.
#
# For user's convenience, new pattern can be omitted if old pattern is reused
# for new pattern.

# Please use TOMOYO Linux's escape rule (e.g. '\040' rather than '\ ' for
# representing a ' ' in a word).

# Files on proc filesystem.
rewrite path_pattern proc:/self/task/\$/fdinfo/\$
rewrite path_pattern proc:/self/task/\$/fd/\$
rewrite head_pattern proc:/self/task/\$/
rewrite path_pattern proc:/self/fdinfo/\$
rewrite path_pattern proc:/self/fd/\$
rewrite head_pattern proc:/self/
rewrite path_pattern proc:/\$/task/\$/fdinfo/\$
rewrite path_pattern proc:/\$/task/\$/fd/\$
rewrite head_pattern proc:/\$/task/\$/
rewrite path_pattern proc:/\$/fdinfo/\$
rewrite path_pattern proc:/\$/fd/\$
rewrite head_pattern proc:/\$/

# Files on devpts filesystem.
rewrite path_pattern devpts:/\$

# Files on pipe filesystem.
rewrite path_pattern pipe:[\$]
rewrite path_pattern pipefs:/[\$]

# Files on / partition.
rewrite tail_pattern /etc/mtab~\$
rewrite tail_pattern /etc/ccs/policy/\*/domain_policy.conf
rewrite tail_pattern /etc/ccs/policy/\*/exception_policy.conf
rewrite tail_pattern /etc/ccs/policy/\*/manager.conf
rewrite tail_pattern /etc/ccs/policy/\*/profile.conf
rewrite tail_pattern /etc/ccs/policy/\*/

# Files on /tmp/ partition.
rewrite tail_pattern /vte\?\?\?\?\?\?
rewrite tail_pattern /.ICE-unix/\$
rewrite tail_pattern /keyring-\?\?\?\?\?\?/socket.ssh
rewrite tail_pattern /orbit-\*/bonobo-activation-register-\X.lock
rewrite tail_pattern /orbit-\*/bonobo-activation-server-\X-ior
rewrite tail_pattern /orbit-\*/linc-\*
rewrite tail_pattern /orbit-\*/
rewrite tail_pattern /sh-thd-\$
rewrite tail_pattern /zman\?\?\?\?\?\?

# Files on home directory.
rewrite tail_pattern /.ICEauthority-\?
rewrite tail_pattern /.xauth\?\?\?\?\?\?
rewrite tail_pattern /.xauth\?\?\?\?\?\?-?
rewrite tail_pattern /.local/share/applications/preferred-mail-reader.desktop.\?\?\?\?\?\?
rewrite tail_pattern /.local/share/applications/preferred-web-browser.desktop.\?\?\?\?\?\?

# Files on /var/ partition.
rewrite tail_pattern /cache/fontconfig/\X-le64.cache-3
rewrite tail_pattern /lib/gdm/.pulse/\X-default-source
rewrite tail_pattern /lib/gdm/.pulse/\X-default-sink
rewrite tail_pattern /lib/gdm/.dbus/session-bus/\X-\X
rewrite tail_pattern /run/gdm/auth-for-\*/database-\?
rewrite tail_pattern /run/gdm/auth-for-\*/database
rewrite tail_pattern /run/gdm/auth-for-\*/
rewrite tail_pattern /spool/abrt/pyhook-\*/\{\*\}/\*
rewrite tail_pattern /spool/abrt/pyhook-\*/\{\*\}/
</pre>

<p>path_pattern はパス名の全体一致、 head_pattern はパス名の前方一致、 tail_pattern はパス名の後方一致です。</p>

<p>/tmp/Rs\?\?\?\?\?\? および /var/spool/clientmqueue/\* というパターンを /etc/ccs/tools/patternize.conf に追加してください。</p>

<table border="1">
<tr><td>
rewrite tail_pattern /tmp/Rs\?\?\?\?\?\?<br>
rewrite tail_pattern /var/spool/clientmqueue/\*
</td></tr>
</table>

<p>その後、 /usr/sbin/ccs-patternize コマンドを利用してパターン化を行い、 /usr/sbin/ccs-diffpolicy コマンドを利用して結果を比較してください。</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# ccs-savepolicy -d &gt; /tmp/old<br>
[root@tomoyo ~]# ccs-patternize &lt; /tmp/old &gt; /tmp/new<br>
[root@tomoyo ~]# ccs-diffpolicy /tmp/old /tmp/new<br>
&lt;kernel&gt; /usr/sbin/httpd<br>
<br>
file write proc:/self/task/\$/attr/fscreate<br>
delete file write proc:/self/task/2766/attr/fscreate<br>
<br>
&lt;kernel&gt; /usr/sbin/httpd /bin/sh /bin/mail<br>
<br>
file create /tmp/Rs\?\?\?\?\?\? 0666<br>
file read /tmp/Rs\?\?\?\?\?\?<br>
file unlink /tmp/Rs\?\?\?\?\?\?<br>
file write /tmp/Rs\?\?\?\?\?\?<br>
delete file create /tmp/RsACr8YD 0666<br>
delete file create /tmp/RsXg3Aav 0666<br>
delete file read /tmp/RsACr8YD<br>
delete file read /tmp/RsXg3Aav<br>
delete file unlink /tmp/RsACr8YD<br>
delete file unlink /tmp/RsXg3Aav<br>
delete file write /tmp/RsACr8YD<br>
delete file write /tmp/RsXg3Aav<br>
<br>
&lt;kernel&gt; /usr/sbin/httpd /bin/sh /bin/mail<br>
<br>
file ioctl pipefs:/[\$] 0x5413<br>
delete file ioctl pipefs:/[11895] 0x5413<br>
delete file ioctl pipefs:/[11965] 0x5413<br>
<br>
&lt;kernel&gt; /usr/sbin/httpd /bin/sh /bin/mail /usr/sbin/sendmail<br>
<br>
file create /var/spool/clientmqueue/\* 0660<br>
file read /var/spool/clientmqueue/\*<br>
file unlink /var/spool/clientmqueue/\*<br>
file write /var/spool/clientmqueue/\*<br>
delete file create /var/spool/clientmqueue/dfoBPETPpH002933 0660<br>
delete file create /var/spool/clientmqueue/dfoBPETf92002944 0660<br>
delete file create /var/spool/clientmqueue/qfoBPETPpH002933 0660<br>
delete file create /var/spool/clientmqueue/qfoBPETf92002944 0660<br>
delete file read /var/spool/clientmqueue/dfoBPETPpH002933<br>
delete file read /var/spool/clientmqueue/dfoBPETf92002944<br>
delete file unlink /var/spool/clientmqueue/dfoBPETPpH002933<br>
delete file unlink /var/spool/clientmqueue/dfoBPETf92002944<br>
delete file unlink /var/spool/clientmqueue/qfoBPETPpH002933<br>
delete file unlink /var/spool/clientmqueue/qfoBPETf92002944<br>
delete file unlink /var/spool/clientmqueue/xfoBPETPpH002933<br>
delete file unlink /var/spool/clientmqueue/xfoBPETf92002944<br>
delete file write /var/spool/clientmqueue/dfoBPETPpH002933<br>
delete file write /var/spool/clientmqueue/dfoBPETf92002944<br>
delete file write /var/spool/clientmqueue/qfoBPETPpH002933<br>
delete file write /var/spool/clientmqueue/qfoBPETf92002944<br>
<br>
&lt;kernel&gt; /usr/sbin/httpd /bin/sh /bin/ls<br>
<br>
file ioctl pipefs:/[\$] 0x5413<br>
delete file ioctl pipefs:/[11965] 0x5413<br>
</td></tr>
</table>

<p>意図したとおりに変換されていない場合には、テキストエディタを利用して /tmp/new を直接編集しても構いませんし、 /etc/ccs/tools/patternize.conf を更新してから再度パターン化を行っても構いません。</p>

<p>意図したとおりに変換された場合には、変更内容をカーネル内に読み込ませることで反映することができます。</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# ccs-diffpolicy /tmp/old /tmp/new | /usr/sbin/ccs-loadpolicy -d
</td></tr>
</table>

<p>参考までに、特定のドメインだけを対象に変換処理を行いたい場合、 /usr/sbin/ccs-selectpolicy コマンドを利用して特定のドメインのドメインポリシーだけを抽出することができます。例えば、</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# ccs-selectpolicy -r '&lt;kernel&gt; /usr/sbin/httpd' &lt; /proc/ccs/domain_policy &gt; /tmp/old-httpd<br>
[root@tomoyo ~]# ccs-patternize &lt; /tmp/old-httpd &gt; /tmp/new-httpd<br>
[root@tomoyo ~]# ccs-diffpolicy /tmp/old-httpd /tmp/new-httpd | ccs-loadpolicy -d
</td></tr>
</table>

<p>のように実行すると、 &lt;kernel&gt; /usr/sbin/httpd ドメインとその子孫ドメインだけを対象にパターン化処理を行うことができます。また、 /etc/ccs/tools/patternize.conf の rewite 行の前に</p>

<pre>
domain.starts &lt;kernel&gt; /usr/sbin/httpd
</pre>

<p>という行を指定することにより、 &lt;kernel&gt; /usr/sbin/httpd およびその子孫ドメインだけをパターン化の対象とすることができます。</p>

<hr>

<h2>ステップ４：ファイルのパス名をパターン化する</h2>

<p>WWW サーバがアクセスするコンテンツのように、学習モードでは必ずしもアクセスされないファイルに対するアクセス許可を追加します。</p>

<table border="1">
<tr><td>修正前</td><td>修正後</td></tr>
<tr><td>
&lt;kernel&gt; /usr/sbin/httpd<br>
<br>
file read /var/www/html/index.html<br>
file read /var/www/html/alice/index.html<br>
file read /var/www/html/alice/page1.html<br>
file read /var/www/html/alice/page2.html<br>
file read /var/www/html/alice/image1.jpg<br>
file read /var/www/html/alice/image2.jpg<br>
file read /var/www/html/alice/archive/page1.html<br>
file read /var/www/html/alice/archive/image1.jpg<br>
file read /var/www/html/alice/archive/page2.html<br>
file read /var/www/html/alice/archive/image2.jpg<br>
file read /var/www/html/bob/index.html<br>
file read /var/www/html/bob/page1.html<br>
file read /var/www/html/bob/page2.html<br>
file read /var/www/html/bob/image1.jpg<br>
file read /var/www/html/bob/image2.jpg<br>
file read /var/www/html/bob/archive/page1.html<br>
file read /var/www/html/bob/archive/image1.jpg<br>
file read /var/www/html/bob/archive/page2.html<br>
file read /var/www/html/bob/archive/image2.jpg
</td><td>
&lt;kernel&gt; /usr/sbin/httpd<br>
<br>
file read /var/www/html/\*.html<br>
file read /var/www/html/\{\*\}/\*.html<br>
file read /var/www/html/\{\*\}/\*.jpg<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
</td></tr>
</table>

<p>例外ポリシーで</p>

<table border="1">
<tr><td>
path_group WEB-CONTENTS /var/www/html/\*.html<br>
path_group WEB-CONTENTS /var/www/html/\{\*\}/\*.html<br>
path_group WEB-CONTENTS /var/www/html/\{\*\}/\*.jpg<br>
</td></tr>
</table>

<p>という path_group を定義しておくことにより、上記の指定は</p>

<table border="1">
<tr><td>
&lt;kernel&gt; /usr/sbin/httpd<br>
<br>
file read @WEB-CONTENTS
</td></tr>
</table>

<p>のように指定することもできます。</p>

<p>上記の変換処理は /usr/sbin/ccs-editpolicy を利用して行うことができますが、 /usr/sbin/ccs-patternize を利用して行うこともできます。</p>

<pre>
domain.equals &lt;kernel&gt; /usr/sbin/httpd
acl.starts file read
rewrite path_pattern /var/www/html/\*.html @WEB-CONTENTS

domain.equals &lt;kernel&gt; /usr/sbin/httpd
acl.starts file read
rewrite path_pattern /var/www/html/\{\*\}/\*.html @WEB-CONTENTS

domain.equals &lt;kernel&gt; /usr/sbin/httpd
acl.starts file read
rewrite path_pattern /var/www/html/\{\*\}/\*.jpg @WEB-CONTENTS
</pre>

<p>という内容を /etc/ccs/tools/patternize.conf に追加後、ステップ３と同様に処理します。ただし、 /usr/sbin/ccs-patternize はドメインポリシーしか処理しないため、例外ポリシーに path_group を追加することを忘れないでください。</p>

<hr>

<h2>ステップ５：数値パラメータをパターン化する</h2>

<p>ファイル作成時のパーミッションやネットワークに関するアクセス許可のポート番号のような数値で指定するパラメータのパターン化を行います。</p>

<p>以下の例では、 /usr/sbin/httpd に対してポート 1024 ～ 65535 からの接続要求を許可しています。</p>

<table border="1">
<tr><td>修正前</td><td>修正後</td></tr>
<tr><td>
&lt;kernel&gt; /usr/sbin/httpd<br>
<br>
network inet stream accept 0:0:0:0:0:ffff:c0a8:801 3810<br>
network inet stream accept 0:0:0:0:0:ffff:c0a8:801 3829<br>
network inet stream accept 0:0:0:0:0:ffff:c0a8:801 3829
</td><td>
&lt;kernel&gt; /usr/sbin/httpd<br>
<br>
network inet stream accept 0:0:0:0:0:ffff:c0a8:801 1024-65535<br>
<br>
<br>
</td></tr>
</table>

<p>例外ポリシーで</p>

<table border="1">
<tr><td>
number_group WEB-CLIENT-PORTS 1024-65535
</td></tr>
</table>

<p>という number_group を定義しておくことにより、上記の指定は</p>

<table border="1">
<tr><td>
&lt;kernel&gt; /usr/sbin/httpd<br>
<br>
network inet stream accept 0:0:0:0:0:ffff:c0a8:801 @WEB-CLIENT-PORTS<br>
</td></tr>
</table>

<p>のように指定することもできます。</p>

<p>上記の変換処理は /usr/sbin/ccs-editpolicy を利用して行うことができますが、 /usr/sbin/ccs-patternize を利用して行うこともできます。</p>

<pre>
domain.equals &lt;kernel&gt; /usr/sbin/httpd
acl.starts network inet stream accept
rewrite number_pattern 1024-65535 @WEB-CLIENT-PORTS
</pre>

<p>という内容を /etc/ccs/tools/patternize.conf に追加後、ステップ３と同様に処理します。ただし、例外ポリシーに number_group を追加することを忘れないでください。</p>

<hr>

<h2>ステップ６：ネットワークのアドレスをパターン化する</h2>

<p>同様にＩＰアドレスについてもパターン化を行います。</p>

<table border="1">
<tr><td>修正前</td><td>修正後</td></tr>
<tr><td>
&lt;kernel&gt; /usr/sbin/httpd<br>
<br>
network inet stream accept 0:0:0:0:0:0:0:1 @WEB-CLIENT-PORTS<br>
network inet stream accept 0:0:0:0:0:ffff:a00:1 @WEB-CLIENT-PORTS<br>
network inet stream accept 0:0:0:0:0:ffff:a00:a1 @WEB-CLIENT-PORTS<br>
network inet stream accept 10.0.0.10 @WEB-CLIENT-PORTS<br>
network inet stream accept 10.0.0.200 @WEB-CLIENT-PORTS
</td><td>
&lt;kernel&gt; /usr/sbin/httpd<br>
<br>
network inet stream accept 0:0:0:0:0:0:0:1 @WEB-CLIENT-PORTS<br>
network inet stream accept 0:0:0:0:0:ffff:a00:1-0:0:0:0:0:ffff:a00:ff @WEB-CLIENT-PORTS<br>
network inet stream accept 10.0.0.1-10.0.0.255 @WEB-CLIENT-PORTS<br>
<br>
<br>
</td></tr>
</table>

<p>例外ポリシーで</p>

<table border="1">
<tr><td>
address_group WEB-CLIENT-ADDRESS 0:0:0:0:0:0:0:1<br>
address_group WEB-CLIENT-ADDRESS 0:0:0:0:0:ffff:a00:1-0:0:0:0:0:ffff:a00:ff<br>
address_group WEB-CLIENT-ADDRESS 10.0.0.1-10.0.0.255
</td></tr>
</table>

<p>という address_group を定義しておくことにより、上記の指定は</p>

<table border="1">
<tr><td>
&lt;kernel&gt; /usr/sbin/httpd<br>
<br>
network inet stream accept @WEB-CLIENT-ADDRESS @WEB-CLIENT-PORTS
</td></tr>
</table>

<p>のように指定することができます。</p>

<p>上記の変換処理は /usr/sbin/ccs-editpolicy を利用して行うことができますが、 /usr/sbin/ccs-patternize を利用して行うこともできます。</p>

<pre>
domain.equals &lt;kernel&gt; /usr/sbin/httpd
acl.starts network inet stream accept
rewrite address_pattern 0:0:0:0:0:0:0:1 @WEB-CLIENT-ADDRESS

domain.equals &lt;kernel&gt; /usr/sbin/httpd
acl.starts network inet stream accept
rewrite address_pattern 0:0:0:0:0:ffff:a00:1-0:0:0:0:0:ffff:a00:ff @WEB-CLIENT-ADDRESS

domain.equals &lt;kernel&gt; /usr/sbin/httpd
acl.starts network inet stream accept
rewrite address_pattern 10.0.0.1-10.0.0.255 @WEB-CLIENT-ADDRESS
</pre>

<p>という内容を /etc/ccs/tools/patternize.conf に追加後、ステップ３と同様に処理します。ただし、例外ポリシーに address_group を追加することを忘れないでください。</p>

<hr>

<p><a href="index.html.ja">目次へ戻る</a></p>
<p><a href="http://osdn.jp/"><img src="http://osdn.jp/sflogo.php?group_id=5310" width="96" height="31" alt="sflogo.php" title="SourceForge.jp"></a></p>
</body>
</html>
